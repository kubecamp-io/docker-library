# See https://docs.github.com/en/rest/reference/repos#update-a-repository for all available settings.
repository:
  default_branch: main
  allow_squash_merge: true
  delete_branch_on_merge: true

# Labels: define labels for Issues and Pull Requests
# Template from: https://github.com/ManageIQ/guides/blob/master/labels.md
labels:
  - name: bug
    color: '#d73a4a'
    description: Something isn't working.
  - name: documentation
    color: '#d4c5f9'
    description: Changes that only affect documentation.
  - name: enhancement
    color: '#84b6eb'
    description: An enhancement/feature request.
  - name: dependencies
    color: '#b4a8d1'
    description: Changes that affect dependencies.
  - name: cleanup
    color: '#fef2c0'
    description: Changes only making the code cleaner and not the outputs produced.
  - name: refactoring
    color: '#fbca04'
    description: Changes in the way the code works internally without changing the output produced.
  - name: tools
    color: '#bcf5db'
    description: Changes to customer-facing tools.
  - name: developer
    color: '#bcf5db'
    description: Changes that affect developers only, including non-customer-facing tools.

# Collaborators: give specific users access to this repository.
# See https://docs.github.com/en/rest/reference/repos#add-a-repository-collaborator for available options
# collaborators:
#   - username: kubecamp-automation
#     permission: admin

# See https://docs.github.com/en/rest/reference/teams#add-or-update-team-repository-permissions for available options
teams:
  # The permission to grant the team. Can be one of:
  # * `pull` - can pull, but not push to or administer this repository.
  # * `push` - can pull and push, but not administer this repository.
  # * `admin` - can pull, push and administer this repository.
  # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
  # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
  - name: maintainers
    permission: admin

branches:
  - name: main
    # https://docs.github.com/en/rest/reference/repos#update-branch-protection
    # Branch Protection settings. Set to null to disable
    protection:
      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
      required_pull_request_reviews:
        # The number of approvals required. (1-6)
        required_approving_review_count: 1
        # Blocks merge until code owners have reviewed.
        require_code_owner_reviews: true
      # Required. Require status checks to pass before merging. Set to null to disable
      required_status_checks:
        # Required. Require branches to be up to date before merging.
        strict: true
        # Required. The list of status checks to require in order to merge into this branch.
        contexts: []
      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
      enforce_admins: false
      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
      restrictions:
        apps: []
        users: []
        teams: []

# Notes
# Label color can also start with #, e.g. color: '#F341B2'. Make sure to wrap it with quotes!
# Each top-level element under branch protection must be filled (eg: required_pull_request_reviews, required_status_checks, enforce_admins and restrictions).
# If you don't want to use one of them you must set it to null (see comments in the example above). Otherwise, none of the settings will be applied.
